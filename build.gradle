import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.33'
}

ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

version = "${config.version}"

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = "vazkii.patchouli"
archivesBaseName = config.mod_name

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

dependencies {
    compileOnly 'curse.maven:bnbgamingcore-274341:2991671'
}

minecraft {
    mcVersion = "1.12.2"
    injectedTags.put('MOD_VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.common.base.Tags")
}

jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    
    // exclude test assets
    exclude "**/assets/patchouli/patchouli_books/**"
    exclude "**/assets/patchouli/advancements/**"
}

for (File at : sourceSets.getByName("main").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.mcVersion
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1'

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register("deobfJar", Jar) {
    from(sourceSets.main.output)
    archiveClassifier = "deobf"
}

tasks.jar {
    from(sourceSets.main.output)
    manifest {
        def attributes = [:]
        attributes["FMLAT"] = "patchouli_at.cfg"
    }
}

artifacts {
    archives deobfJar
}

/*publishing { I can't use Maven tasks well i will learn how to use them later pfft

    publications {

        mavenJava (MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            artifacts {
                deobfJar {
                    cl
                    classifier 'deobf'
                }
            }

        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}*/

/**
 * Increments the buildnumber in your config file, and saves it
 * Note: The doFirst is important, without it the build number
 * will be incremented every time tasks are configured, i.e every
 * time gradle is run on this project. 
 */
/*task incrementBuildNumber {doFirst{
    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}} this is just weird to me. Why? */

import java.util.regex.*

tasks.register('sortArtifacts', Copy) { copy ->
    from jar.destinationDirectory
    into config.dir_output
    //Put each jar with a classifier in a subfolder with the classifier as its name
    eachFile {
        //This matcher is used to get the classifier of the jar
        def matcher = Pattern.compile("$config.mod_name-$version-(?<classifier>\\w+).jar").matcher(it.name)
        //Only change the destination for full matches, i.e jars with classifiers
        if (matcher.matches())
        {
            def classifier = matcher.group('classifier')
            /* Set the relative path to change the destination, since
             * Gradle doesn't seem to like the absolute path being set*/
            it.relativePath = it.relativePath.parent.append(false, classifier, it.name)
        }
    }
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

defaultTasks 'clean', 'build', 'sortArtifacts', 'incrementBuildNumber'